AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates IAM resources used for StreamNative's vendor access"

Parameters:
  VendorSupportRoleArn:
    Description: "The IAM Role ARN used by StreamNative for vendor access into your AWS account. This is provided to you by StreamNative."
    Type: String
    Default: "arn:aws:iam::311022431024:role/cloud-manager"
  ControlPlaneSAID:
    Description: "The SA ID used by the StreamNative Cloud Control Plane"
    Type: String
    Default: "108050666045451143798"

Resources:
    BootstrapRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/StreamNative/"
            RoleName: "StreamNativeCloudBootstrapRole"
            AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: AllowStreamNativeVendorAccess
                Effect: Allow
                Principal:
                  AWS:
                    - !Ref VendorSupportRoleArn
                Action: sts:AssumeRole
            MaxSessionDuration: 3600
            PermissionsBoundary: !Ref PermissionBoundaryPolicy
            ManagedPolicyArns:
              - !Ref BootstrapPolicy
            Description: "This role is used to bootstrap the StreamNative Cloud within the AWS account. It is limited in scope to the attached policy and also the permission boundary."
            Tags:
              -
                Key: "Vendor"
                Value: "StreamNative"

    ManagementRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/StreamNative/"
            RoleName: "StreamNativeCloudManagementRole"
            AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: AllowStreamNativeVendorAccess
                Effect: Allow
                Principal:
                  AWS:
                    - !Ref VendorSupportRoleArn
                Action: sts:AssumeRole
              - Sid: AllowStreamNativeControlPlaneAccess
                Effect: Allow
                Principal:
                  Federated: accounts.google.com
                Action: sts:AssumeRoleWithWebIdentity
                Condition:
                  StringEquals:
                    accounts.google.com:aud: !Ref ControlPlaneSAID
            MaxSessionDuration: 3600
            PermissionsBoundary: !Ref PermissionBoundaryPolicy
            ManagedPolicyArns:
              - !Ref ManagementPolicy
            Description: "This role is used by StreamNative for the day to day management of the StreamNative Cloud deployment."
            Tags:
              -
                Key: "Vendor"
                Value: "StreamNative"

    PermissionBoundaryPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "StreamNativeCloudPermissionBoundary"
            Path: "/StreamNative/"
            PolicyDocument: !Sub |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "AllowedServices",
                			"Effect": "Allow",
                			"Action": [
                			    "acm:*",
                			    "autoscaling:*",
                			    "cognito-idp:*",
                			    "dynamodb:*",
                			    "ec2:*",
                			    "ecr:*",
                			    "eks:*",
                			    "elasticloadbalancing:*",
                			    "iam:GetInstanceProfile",
                			    "iam:GetOpenIDConnectProvider",
                			    "iam:GetPolicy",
                			    "iam:GetPolicyVersion",
                			    "iam:GetRole",
                			    "iam:GetServerCertificate",
                			    "iam:ListAttachedRolePolicies",
                			    "iam:ListEntitiesForPolicy",
                			    "iam:ListInstanceProfile*",
                			    "iam:ListOpenIDConnectProvider*",
                			    "iam:ListPolicies",
                			    "iam:ListPolicyTags",
                			    "iam:ListPolicyVersions",
                			    "iam:ListRole*",
                			    "iam:ListServerCertificates",
                			    "kms:*",
                			    "logs:*",
                			    "route53:*",
                			    "s3:*",
                			    "shield:*",
                			    "sts:*",
                			    "waf-regional:*",
                			    "wafv2:*"
                			],
                			"Resource": "*"
                		},
                		{
                			"Sid": "IamRestrictions",
                			"Effect": "Allow",
                			"Action": [
                				"iam:AddRoleToInstanceProfile",
                				"iam:AttachRolePolicy",
                				"iam:CreateOpenIDConnectProvider",
                				"iam:CreatePolicy",
                				"iam:CreatePolicyVersion",
                				"iam:CreateRole",
                				"iam:CreateServiceLinkedRole",
                				"iam:DeleteInstanceProfile",
                				"iam:DeleteOpenIDConnectProvider",
                				"iam:DeletePolicy",
                				"iam:DeletePolicyVersion",
                				"iam:DeleteRole",
                				"iam:DeleteServiceLinkedRole",
                				"iam:DetachRolePolicy",
                				"iam:PassRole",
                				"iam:PutRolePermissionsBoundary",
                				"iam:RemoveRoleFromInstanceProfile",
                				"iam:SetDefaultPolicyVersion",
                				"iam:TagInstanceProfile",
                				"iam:TagOpenIDConnectProvider",
                				"iam:TagPolicy",
                				"iam:TagRole",
                				"iam:UpdateAssumeRolePolicy",
                				"iam:UpdateOpenIDConnectProviderThumbprint",
                				"iam:UpdateRole",
                				"iam:UpdateRoleDescription"
                			],
                			"Resource": [
                				"arn:aws:iam::aws:policy/*",
                        "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/*",
                				"arn:aws:iam::${AWS::AccountId}:role/StreamNative/*",
                				"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*",
                				"arn:aws:iam::${AWS::AccountId}:oidc-provider/*",
                				"arn:aws:iam::${AWS::AccountId}:instance-profile/*",
                				"arn:aws:iam::${AWS::AccountId}:server-certificate/*"
                			]
                		},
                		{
                			"Sid": "RestrictPassRoleToEKS",
                			"Effect": "Allow",
                			"Action": [
                				"iam:PassRole"
                			],
                			"Resource": "arn:aws:iam::${AWS::AccountId}:role/StreamNative/*",
                			"Condition": {
                				"StringEquals": {
                					"iam:PassedToService": "eks.amazonaws.com"
                				}
                			}
                		},
                		{
                			"Sid": "AllowedIAMManagedPolicies",
                			"Effect": "Deny",
                			"Action": [
                				"iam:AttachRolePolicy"
                			],
                			"Resource": "arn:aws:iam::${AWS::AccountId}:role/StreamNative/*",
                			"Condition": {
                				"ArnNotLike": {
                					"iam:PolicyARN": [
                						"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-AWSLoadBalancerControllerPolicy",
                						"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-CertManagerPolicy",
                						"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-ClusterAutoscalerPolicy",
                						"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-CsiPolicy",
                						"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-ExternalDnsPolicy",
                						"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-ExternalSecretsPolicy",
                						"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-TieredStoragePolicy",
                						"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-VaultPolicy",
                						"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-VeleroBackupPolicy",
                						"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-elb-sl-role-*",
                            "arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*-deny-log-group*",
                            "arn:aws:iam::${AWS::AccountId}:policy/StreamNative/StreamNativeCloudPermissionBoundary",
                						"arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
                						"arn:aws:iam::aws:policy/AmazonEKSServicePolicy",
                						"arn:aws:iam::aws:policy/AmazonEKSVPCResourceController",
                						"arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
                						"arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
                						"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
                					]
                				}
                			}
                		},
                		{
                			"Sid": "RequirePermissionBoundaryForIamRoles",
                			"Effect": "Allow",
                			"Action": [
                				"iam:CreateRole"
                			],
                			"Resource": "arn:aws:iam::${AWS::AccountId}:role/StreamNative/*",
                			"Condition": {
                				"StringEqualsIgnoreCase": {
                					"aws:ResourceTag/Vendor": "StreamNative",
                					"iam:PermissionsBoundary": "arn:aws:iam:::policy/StreamNative/StreamNativeCloudPermissionBoundary"
                				}
                			}
                		},
                		{
                			"Sid": "RestrictChangesToVendorAccess",
                			"Effect": "Deny",
                			"Action": [
                				"iam:Attach",
                				"iam:Create*",
                				"iam:Delete*",
                				"iam:Put",
                				"iam:Tag*",
                				"iam:Untag*",
                				"iam:Update*",
                				"iam:Set*"
                			],
                			"Resource": [
                				"arn:aws:iam:::policy/StreamNative/StreamNativeCloudPermissionBoundary",
                				"arn:aws:iam::${AWS::AccountId}:role/StreamNative/StreamNativeBootstrapRole",
                				"arn:aws:iam::${AWS::AccountId}:role/StreamNative/StreamNativeManagementRole"
                			]
                		}
                	]
                }

    BootstrapPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "StreamNativeCloudBootstrapPolicy"
            Path: "/StreamNative/"
            PolicyDocument: !Sub |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "UnrestrictedServiceAccess",
                			"Effect": "Allow",
                			"Action": [
                				"acm:ListCertificates",
                				"acm:ListTagsForCertificate",
                				"autoscaling:Describe*",
                				"dynamodb:ListBackups",
                				"dynamodb:ListGlobalTables",
                				"dynamodb:ListTables",
                				"dynamodb:ListTagsOfResource",
                        "ec2:AuthorizeSecurityGroup*",
                				"ec2:Describe*",
                				"ec2:Get*",
                        "ec2:RevokeSecurityGroup*",
                        "ec2:RunInstances",
                				"eks:Describe*",
                				"eks:List*",
                				"iam:AttachRolePolicy",
                				"iam:GetInstanceProfile",
                				"iam:GetOpenIDConnectProvider",
                				"iam:GetPolicy",
                				"iam:GetPolicyVersion",
                				"iam:GetRole",
                				"iam:ListAttachedRolePolicies",
                				"iam:ListEntitiesForPolicy",
                				"iam:ListInstanceProfile*",
                				"iam:ListOpenIDConnectProvider*",
                				"iam:ListPolicies",
                				"iam:ListPolicyTags",
                				"iam:ListPolicyVersions",
                				"iam:ListRole*",
                				"kms:CreateAlias",
                				"kms:CreateKey",
                				"kms:DeleteAlias",
                				"kms:DescribeKey",
                				"kms:GetKeyPolicy",
                				"kms:GetKeyRotationStatus",
                				"kms:ListAliases",
                				"kms:ListResourceTags",
                				"kms:ScheduleKeyDeletion",
                				"kms:TagResource",
                				"logs:CreateLogGroup",
                				"logs:DescribeLogGroups",
                				"logs:ListTagsLogGroup",
                        "route53:CreateHostedZone",
                        "route53:ChangeTagsForResource",
                        "route53:GetChange",
                        "route53:GetHostedZone",
                        "route53:ListHostedZones",
                        "route53:ListTagsForResource",
                				"s3:ListAllMyBuckets",
                				"s3:ListBucket"
                			],
                			"Resource": "*"
                		},
                		{
                			"Sid": "ResourceBasedRestictions",
                			"Effect": "Allow",
                			"Action": [
                				"eks:DeleteNodeGroup",
                				"iam:CreatePolicy",
                				"iam:CreatePolicyVersion",
                				"iam:DeletePolicy",
                				"iam:DeletePolicyVersion"
                			],
                			"Resource": [
                				"arn:aws:eks:${AWS::Region}:${AWS::AccountId}:nodegroup/*/snc-*-pool*/*",
                				"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*"
                			]
                		},
                		{
                			"Sid": "RequireAWSRequestTag",
                			"Effect": "Allow",
                			"Action": [
                				"acm:AddTagsToCertificate",
                				"acm:ImportCertificate",
                				"acm:RemoveTagsFromCertificate",
                				"acm:RequestCertificate",
                				"autoscaling:CreateAutoScalingGroup",
                				"autoscaling:CreateLaunchConfiguration",
                				"autoscaling:CreateOrUpdateTags",
                				"autoscaling:DetachInstances",
                				"autoscaling:SetDesiredCapacity",
                				"autoscaling:UpdateAutoScalingGroup",
                				"autoscaling:SuspendProcesses",
                				"ec2:AllocateAddress",
                				"ec2:CreateDhcpOptions",
                				"ec2:CreateEgressOnlyInternetGateway",
                				"ec2:CreateInternetGateway",
                				"ec2:CreateLaunchTemplate",
                				"ec2:CreateNatGateway",
                				"ec2:CreateNetworkInterface",
                				"ec2:CreateRouteTable",
                				"ec2:CreateSecurityGroup",
                				"ec2:CreateSubnet",
                				"ec2:CreateVolume",
                				"ec2:CreateVpc",
                				"ec2:CreateVpcEndpoint",
                				"ec2:CreateTags",
                        "ec2:*TransitGateway*",
                				"eks:Create*",
                        "eks:RegisterCluster",
                				"eks:TagResource"
                			],
                			"Resource": "*",
                			"Condition": {
                				"StringEquals": {
                					"aws:RequestTag/Vendor": "StreamNative"
                				}
                			}
                		},
                		{
                			"Sid": "RequireAWSResourceTag",
                			"Effect": "Allow",
                			"Action": [
                				"acm:DeleteCertificate",
                				"acm:DescribeCertificate",
                				"acm:ExportCertificate",
                				"acm:GetCertificate",
                				"acm:ImportCertificate",
                				"acm:RemoveTagsFromCertificate",
                				"acm:ResendValidationEmail",
                				"autoscaling:AttachInstances",
                				"autoscaling:CreateOrUpdateTags",
                				"autoscaling:Delete*",
                				"ec2:AssignPrivateIpAddresses",
                				"ec2:Associate*",
                				"ec2:AttachInternetGateway",
                				"ec2:CreateLaunchTemplateVersion",
                				"ec2:CreateNatGateway",
                				"ec2:CreateNetworkInterface",
                				"ec2:CreateRoute",
                				"ec2:CreateRouteTable",
                				"ec2:CreateSecurityGroup",
                				"ec2:CreateSubnet",
                				"ec2:CreateTags",
                				"ec2:CreateVpcEndpoint",
                				"ec2:Delete*",
                				"ec2:Detach*",
                				"ec2:Disassociate*",
                				"ec2:Modify*",
                				"ec2:Release*",
                				"ec2:Revoke*",
                				"ec2:RunInstances",
                        "ec2:TerminateInstances",
                        "ec2:*TransitGateway*",
                				"ec2:Update*",
                        "eks:DeleteAddon",
                        "eks:DeleteCluster",
                        "eks:DeleteFargateProfile",
                        "eks:DeregisterCluster",
                        "eks:DisassociateIdentityProviderConfig",
                				"eks:U*",
                				"logs:DeleteLogGroup",
                				"logs:PutRetentionPolicy"
                			],
                			"Resource": "*",
                			"Condition": {
                				"StringEquals": {
                					"aws:ResourceTag/Vendor": "StreamNative"
                				}
                			}
                		},
                		{
                			"Sid": "RestrictS3Access",
                			"Effect": "Allow",
                			"Action":[
                				"s3:CreateBucket",
                				"s3:DeleteBucket",
                				"s3:GetAccelerateConfiguration",
                				"s3:GetAccessPointPolicy",
                				"s3:GetAccountPublicAccessBlock",
                				"s3:GetAnalyticsConfiguration",
                				"s3:GetBucket*",
                				"s3:GetBucketLocation",
                				"s3:GetEncryptionConfiguration",
                				"s3:GetInventoryConfiguration",
                				"s3:GetLifecycleConfiguration",
                				"s3:GetMetricsConfiguration",
                				"s3:GetReplicationConfiguration",
                				"s3:PutAccelerateConfiguration",
                				"s3:PutAccessPointPolicy",
                				"s3:PutAccountPublicAccessBlock",
                				"s3:PutAnalyticsConfiguration",
                				"s3:PutBucket*",
                				"s3:PutEncryptionConfiguration",
                				"s3:PutInventoryConfiguration",
                				"s3:PutLifecycleConfiguration",
                				"s3:PutMetricsConfiguration",
                				"s3:PutReplicationConfiguration"
                			 ],
                			 "Resource": [
                				"arn:aws:s3:::*-storage-offload-*",
                				"arn:aws:s3:::*-backup-*"
                			 ]
                		},
                		{
                			"Sid": "RestrictDynamoAccess",
                			"Effect": "Allow",
                			"Action": [
                				"dynamodb:*ContinuousBackups",
                				"dynamodb:CreateBackup",
                				"dynamodb:CreateGlobalTable",
                				"dynamodb:CreateTable*",
                				"dynamodb:Delete*",
                				"dynamodb:Describe*",
                				"dynamodb:RestoreTable*",
                				"dynamodb:TagResource",
                				"dynamodb:UntagResource",
                				"dynamodb:Update*"
                			],
                			"Resource": [
                				"arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*vault-table",
                				"arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:global-table/*vault-table"
                			]
                		},
                		{
                			"Sid": "IamRequireRequestTag",
                			"Effect": "Allow",
                			"Action": [
                				"iam:CreateRole",
                				"iam:CreateOpenIDConnectProvider",
                				"iam:TagPolicy",
                				"iam:TagRole",
                				"iam:TagInstanceProfile",
                				"iam:TagOpenIDConnectProvider"
                			],
                			"Resource": [
                				"arn:aws:iam::${AWS::AccountId}:role/StreamNative/*",
                				"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*",
                				"arn:aws:iam::${AWS::AccountId}:oidc-provider/*"
                			],
                			"Condition": {
                				"StringEqualsIgnoreCase": {
                					"aws:RequestTag/Vendor": "StreamNative"
                				}
                			}
                		},
                		{
                			"Sid": "IamRequireResourceTag",
                			"Effect": "Allow",
                			"Action": [
                				"iam:AddRoleToInstanceProfile",
                				"iam:DeleteInstanceProfile",
                				"iam:DeleteOpenIDConnectProvider",
                				"iam:DeleteRole",
                				"iam:DeleteServiceLinkedRole",
                				"iam:DetachRolePolicy",
                				"iam:PutRolePermissionsBoundary",
                				"iam:RemoveRoleFromInstanceProfile",
                				"iam:SetDefaultPolicyVersion",
                				"iam:UpdateAssumeRolePolicy",
                				"iam:UpdateOpenIDConnectProviderThumbprint",
                				"iam:UpdateRole",
                				"iam:UpdateRoleDescription"
                			],
                			"Resource": [
                				"arn:aws:iam::${AWS::AccountId}:role/StreamNative/*",
                				"arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*",
                				"arn:aws:iam::${AWS::AccountId}:oidc-provider/*"
                			],
                			"Condition": {
                				"StringEqualsIgnoreCase": {
                					"aws:ResourceTag/Vendor": "StreamNative"
                				}
                			}
                		},
                		{
                			"Sid": "AllowAWSServiceRoleCreation",
                			"Effect": "Allow",
                			"Action": "iam:CreateServiceLinkedRole",
                			"Resource":  "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/*"
                		},
                		{
                			"Sid": "RestrictPassRoleToEKS",
                			"Effect": "Allow",
                			"Action": [
                				"iam:PassRole"
                			],
                			"Resource": "*",
                			"Condition": {
                				"StringEquals": {
                					"iam:PassedToService": "eks.amazonaws.com"
                				}
                			}
                		}
                	]
                }

    ManagementPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "StreamNativeCloudManagementPolicy"
            Path: "/StreamNative/"
            PolicyDocument: !Sub |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Sid": "AllowedServices",
                      "Effect": "Allow",
                      "Action": [
                        "acm:List*",
                        "cloudwatch:Describe*",
                        "cloudwatch:List*",
                        "cloudwatch:Get*",
                        "logs:Describe*",
                        "logs:List*",
                        "logs:Filter*",
                        "logs:StartQuery",
                        "logs:StopQuery",
                        "route53:Get*",
                        "route53:List*"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Sid": "AllowedIAMReadActions",
                      "Effect": "Allow",
                      "Action": [
                        "iam:GetPolicy*",
                        "iam:GetRole*",
                        "iam:ListRole*",
                        "iam:ListPolic*"
                      ],
                      "Resource": [
                        "arn:aws:iam::${AWS::AccountId}:role/StreamNative/*",
                        "arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*",
                        "arn:aws:iam::aws:policy/*"
                      ]
                    },
                		{
                		  "Sid": "IamRequireRequestTag",
                		  "Effect": "Allow",
                		  "Action": [
                			  "iam:CreateRole",
                			  "iam:TagPolicy",
                			  "iam:TagRole"
                		  ],
                		  "Resource": [
                			  "arn:aws:iam::${AWS::AccountId}:role/StreamNative/*",
                			  "arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*"
                		  ],
                		  "Condition": {
                			  "StringEqualsIgnoreCase": {
                				  "aws:RequestTag/Vendor": "StreamNative"
                			  }
                		  }
                    },
                		{
                			"Sid": "IamRequireResourceTag",
                			"Effect": "Allow",
                			"Action": [
                				"iam:DeleteRole",
                				"iam:DetachRolePolicy",
                				"iam:PutRolePermissionsBoundary",
                				"iam:SetDefaultPolicyVersion",
                				"iam:UpdateAssumeRolePolicy",
                				"iam:UpdateRole",
                				"iam:UpdateRoleDescription"
                			],
                			"Resource": [
                			  "arn:aws:iam::${AWS::AccountId}:role/StreamNative/*",
                			  "arn:aws:iam::${AWS::AccountId}:policy/StreamNative/*"
                		  ],
                		  "Condition": {
                			  "StringEqualsIgnoreCase": {
                				  "aws:ResourceTag/Vendor": "StreamNative"
                			  }
                		  }
                		},
                    {
                      "Sid": "RequireResourceTag",
                      "Effect": "Allow",
                      "Action": [
                        "acm:DeleteCertificate",
                        "acm:DescribeCertificate",
                        "acm:GetCertificate",
                        "autoscaling:CancelInstanceRefresh",
                        "autoscaling:Describe*",
                        "autoscaling:PutScalingPolicy",
                        "autoscaling:ResumeProcesses",
                        "autoscaling:SetDesiredCapacity",
                        "autoscaling:StartInstanceRefresh",
                        "autoscaling:SuspendProcesses",
                        "autoscaling:UpdateAutoScalingGroup",
                        "ec2:Describe*",
                        "ec2:Get*",
                        "eks:Describe*",
                        "eks:List*",
                        "eks:UpdateNodegroupConfig",
                        "eks:UpdateNodegroupVersion",
                        "elasticloadbalancing:Describe*"
                      ],
                      "Resource": [
                        "*"
                      ],
                      "Condition": {
                        "StringEqualsIgnoreCase": {
                          "aws:ResourceTag/Vendor": "StreamNative"
                        }
                      }
                    },
                    {
                      "Sid": "RequireRequestTag",
                      "Effect": "Allow",
                      "Action": [
                        "acm:AddTagsToCertificate",
                        "acm:ImportCertificate"
                      ],
                      "Resource": [
                        "*"
                      ],
                      "Condition": {
                        "StringEqualsIgnoreCase": {
                           "aws:RequestTag/Vendor": "StreamNative"
                       }
                     }
                    }
                  ]
                }
